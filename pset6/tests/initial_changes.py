import os
import commands
import re
import pickle
import sys

# [num_addresses_log, num_trains_log, mean_train_size, mean_trains_per_comm,
# mean_window, mean_comms_per_address, mean_work, config_fraction, png_fraction,
# accepting_fraction]
num_ms = 2000
parameters = [
    (11, 12, 5,  1,  3, 3,  3822, 0.24, 0.04, 0.96),
    (12, 10, 1,  3,  3, 1,  2644, 0.11, 0.09, 0.92),
    (12, 10, 4,  3,  6, 2,  1304, 0.10, 0.03, 0.90),
    (14, 10, 5,  5,  6, 2,  315,  0.08, 0.05, 0.90),
    (15, 14, 9,  16, 7, 10, 4007, 0.02, 0.10, 0.84),
    (15, 15, 9,  10, 9, 9,  7125, 0.01, 0.20, 0.77),
    (15, 15, 10, 13, 8, 10, 5328, 0.04, 0.18, 0.80),
    (16, 14, 15, 12, 9, 5,  8840, 0.04, 0.19, 0.76)
]
num_threads = [1, 2, 4]
implementation_0 = [161.5674, 192.7110, 327.0226, 696.1323, 131.2811, 89.7438, 101.3839, 68.0326]
linear_probe = [491.6925, 627.0500, 825.0747, 1096.2788, 530.5511, 372.9744, 438.2162, 297.6009]
locking = [434.41593686591017, 546.4459330830906, 768.4854794388415, 985.3814322073895, 509.0399237869519, 344.1669307505932, 436.8746947567883, 248.93595559434155]
locking_speedup = [0.8835114159071171, 0.8714551201388895, 0.9314132156019831, 0.8988420027892443, 0.9594550341841754, 0.9227628779631879, 0.9969387137143453, 0.8364758157463285]
lockfree = [459.66572081750934, 577.2296935148903, 765.1543544505638, 1064.3288581095771, 539.0028147147856, 381.05177342617134, 427.1903099915522, 267.8206140892128]
lockfree_speedup = [0.934864210492349, 0.9205481118170645, 0.9273758539082143, 0.9708560068018984, 1.0159300672730405, 1.0216566429925789, 0.9748391547175851, 0.8999321376017774]
array = [491.4112923788232, 621.7284510551898, 835.3745834857007, 1112.9003153743713, 554.1380501831011, 376.672915561297, 430.08588300889875, 277.80228866340894]
array_speedup = [0.9994280823458223, 0.9915133578744755, 1.0124835769242477, 1.0151617593757822, 1.0444574522286374, 1.0099162718977415, 0.9814467904401953, 0.9334726093348807]
# allthreads = [180.33132273791762, 319.0869830988044, 365.88099065925286, 248.72632626013473, 472.60828560904275, 634.9988534243183, 465.77058660411325, 696.6045334257512, 785.6564794473165, 1212.385202657235, 1291.5392158057837, 1005.7100134509626, 154.9472659830799, 287.88355817857547, 496.1591050563756, 101.71131676409783, 202.7189749742865, 335.91301554102273, 128.01860931108308, 257.4325015279684, 436.33545446840446, 80.19663235939245, 162.0937477885966, 305.81342470483355]
# dispatch = [193.32880945868357, 355.6708577631782, 418.4685347342996, 253.38823437006462, 467.4758612252904, 530.2647502018586, 407.81078897428415, 642.4782638676786, 610.3551295321475, 1344.944876658828, 1211.711198481239, 746.2401773425878, 150.2657558506358, 299.08485416561155, 444.7670205837694, 100.74997514470026, 201.84443649495435, 343.04597429454327, 130.45102500608326, 257.9505529286641, 428.2835667716977, 83.12706308895416, 163.9750531973742, 279.0630199012774]
# dispatch_speedup = [1.0720755913250617, 1.11465173009908, 1.1437285494944498, 1.0187431229336543, 0.9891402149728749, 0.835064106560718, 0.8755614903628669, 0.9222998603068354, 0.7768727751873341, 1.1093379181064373, 0.9381915652675398, 0.7420033283570102, 0.9697864295782069, 1.038909120263436, 0.8964201524291954, 0.9905483317886127, 0.995685956485114, 1.0212345411565318, 1.01900048522703, 1.0020123776043073, 0.9815465655741485, 1.036540570886185, 1.011606279911741, 0.9125270421683573]
# cache = [194.9346752899364, 357.07813439144405, 476.1357381697567, 260.79251010642867, 463.3288040206029, 515.6857860195735, 463.30034890038706, 719.9878594051166, 638.1543102543116, 1343.1000159635373, 1216.7563507174825, 785.9463417765252, 150.30457975342162, 302.0803126751814, 502.55743732657663, 102.91625575076422, 202.71928220039618, 362.0161970861651, 132.0346533951831, 264.3540377986158, 410.74840540898765, 86.48102164066141, 168.3982435169179, 294.2708000369801]
# cache_to_array_speedup = [1.0809806767360233, 1.1190620529978679, 1.3013404640450006, 1.0485118886598048, 0.9803653853074507, 0.8121050663929033, 0.9946964497656745, 1.0335675765191639, 0.8122561538641316, 1.1078162394425546, 0.9420978750214375, 0.7814840572976428, 0.9700369916164558, 1.0493142247734746, 1.012895726804155, 1.0118466560555994, 1.0000015155271464, 1.0777081575809158, 1.031370783558046, 1.026886800344033, 0.941359225345119, 1.0783622590672655, 1.038894132650592, 0.9622559909559425]
backoff_lastqueue = [197.609492198461, 301.5073901613757, 251.86559111946497, 246.14044802395563, 452.08310290329223, 402.2321054003803, 445.50170654275314, 543.1443020399091, 577.5144897819551, 1121.2048065056324, 1212.2544238441058, 1197.0465016188768, 143.53154276565894, 175.02497653483374, 318.25460281149117, 97.5160964366758, 139.9476037031919, 242.88743539106298, 128.22490363142734, 224.95961651649895, 307.28641501392383, 81.79909339109432, 135.62157034264092, 251.99990827437128]
backoff_randomqueue = [195.11942614617644, 240.52273840896947, 302.8220050809779, 248.19833412571907, 292.00363956575586, 323.52629045056386, 434.0002621118364, 478.1275406716015, 456.7360514924348, 1308.2540465976583, 1132.584067685394, 642.419377097007, 150.48602320567736, 199.74976859289083, 296.4610296770893, 95.9719142661809, 151.87457266236723, 268.3699512892932, 119.99582887106197, 189.32529758573418, 251.8661649507363, 77.2808573891566, 136.63289269180692, 225.40082042096918]
reentrant_lockfree = [199.0649918073779, 356.43453093421857, 392.5613424904351, 255.90693188092703, 431.01203080956486, 505.62449000689566, 423.71586242997734, 689.2634504675896, 559.8134564725274, 1318.0349846567992, 1234.0416485577973, 879.2953326884642, 143.97332205455385, 282.3756057281219, 471.5075765005108, 92.65332021376256, 192.3844499864518, 375.18089069734714, 123.98008082567873, 251.7679996539743, 347.88348913137537, 81.38753558781404, 163.30036973829476, 303.62237389480805]


NUM_TRIALS = 3

def format_params(p):
    return '%d %d %d %d %d %d %d %f %f %f' % (
        p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9]
    )

def format_result(results, p):
    temp = '\\addplot coordinates {\n\t(2, 2S)\n\t(4, 4S)\n\t(8, 8S)\n};'
    for n in num_threads:
        temp = temp.replace('%dS' % n, str(results[(p, n)]))
    print temp

def run_cmd(cmd):
    print 'Starting command: %s' % cmd

    outputs = []
    for _ in xrange(NUM_TRIALS):
        status, output = commands.getstatusoutput(cmd)

        pkt_per_ms = None
        if status != 0:
            print '    Status: %d' % status
        else:
            result = re.search('PKT_PER_MS(.*)PKT_PER_MS', output)
            try:
                pkt_per_ms_str = result.group(1)
                pkt_per_ms = float(pkt_per_ms_str)
            except:
                print '    Could not convert %s to float' % pkt_per_ms_str

        outputs.append(pkt_per_ms)
        print pkt_per_ms
    print

    outputs.sort()
    return outputs[int(len(outputs) / 2)]

def run_test():

    pkts_per_ms = []
    results = []

    counter = 0
    for i in xrange(len(parameters)):
        p = parameters[i]
        print '-----------------------------------------------'
        print 'Starting for params %d' % (i + 1)

        # serial_cmd = 'java pset6.SerialFirewallTest %d %s' % (num_ms, format_params(p))
        # serial_pkt_per_ms = run_cmd(serial_cmd)
        # if serial_pkt_per_ms is None:
        #     print 'Couldn\'t parse serial output %s' % str(p)
        #     continue
        # results.append(serial_pkt_per_ms)

        for n in num_threads:
            parallel_cmd = 'java pset6.ParallelFirewallTest %d %s %d' % (num_ms, format_params(p), n)
            parallel_pkt_per_ms = run_cmd(parallel_cmd)
            pkts_per_ms.append(parallel_pkt_per_ms)
            # results.append(parallel_pkt_per_ms / allthreads[counter])
            # counter += 1

    print pkts_per_ms
    print results

##############################################

if __name__ == '__main__':
    run_test()
